better imports / exports:

	make one pass for all the exports, have a map of each file name and exports (could be a symbol table)

	add the sub-blocks as normally

	send this map to the pre-process, and import the identifier by simply going to the exports symbol table.

would need to remove the exports in block.





	first pass find all imported files
	second pass assign start address for all file blocks (needed to construct symbol table for each file without needing to do the previous one first)
	third pass construct symbol table for root file
		if any imports are found, recursively create symbol table for import (or use already generated one)
		construction of symbol table also gives a exported symbol table
		add exported symbols to symbol table
	fourth pass, generate machine code

will need to detect any recursive dependencies and disalow



first pass: post order of file imports, add to stack, find dependency cycles, calculate starting addresses
	maybe have relative addresses for all labels, and assignments
	then no need to recalculat eaddresses in second pass, just add file address plus relative address

second pass: pop from stack, generate, if export add to vec, after iterate through exports and evaluate and add to exports field in symbol table
third pass: generate code (no need for pre-process step)
